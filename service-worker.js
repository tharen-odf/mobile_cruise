// service-worker.js

const CACHE_NAME = 'forest-inventory-cache-v1'; // Increment this version when you update your app's assets

// List of all the URLs you want to cache for offline access.
// This includes your HTML file, CSS, JS, and CDN assets.
const urlsToCache = [
    '/#/', // Your main index.html file
    'index.html', // Alternative for some server configurations
    'style.css', // CSS generated by Tailwind CSS CLI

    'https://placehold.co/192x192/25635b/31363f?text=FIx', // Favicon or app icon

    // 'app.js',    // If you have a separate JS file

    // CDN assets for Vue 3
    // 'https://unpkg.com/vue@3/dist/vue.global.js', // Or vue.global.prod.js for production
    'https://unpkg.com/vue@3/dist/vue.global.prod.js',

    // CDN assets for Vue Router (Adjust version as needed)
    'https://unpkg.com/vue-router@4',

    // CDN assets for Dexie (Adjust version as needed)
    'https://unpkg.com/dexie@3/dist/dexie.min.js',

    // CDN assets for PrimeIcons (Adjust version and specific CSS file as needed)
    'https://unpkg.com/primeicons@6.0.1/primeicons.css',
    // 'https://unpkg.com/primeicons@6.0.1/fonts/primeicons.ttf', // Ensure you cache the font files too
    // 'https://unpkg.com/primeicons@6.0.1/fonts/primeicons.woff',
    'https://unpkg.com/primeicons@6.0.1/fonts/primeicons.woff2',

    // Add any other specific images, fonts, or assets your app needs offline
];

self.addEventListener('install', (event) => {
    // The install event is the first event a service worker gets and happens only once.
    // It's used to precache resources needed for offline functionality.
    event.waitUntil(
        caches.open(CACHE_NAME)
            .then((cache) => {
                console.log('Opened cache', CACHE_NAME);
                return cache.addAll(urlsToCache);
            })
            .catch((error) => {
                console.error('Failed to pre-cache resources:', error);
            })
    );
});

self.addEventListener('fetch', (event) => {
    // The fetch event is fired for every request the page makes within the service worker's scope.
    // We implement a "Cache First, then Network" strategy for our cached assets.
    event.respondWith(
        caches.match(event.request)
            .then((response) => {
                // If a cached response exists, return it immediately
                if (response) {
                    console.log('Serving from cache:', event.request.url);
                    return response;
                }
                console.log('No cache match, fetching from network:', event.request.url);
                // Otherwise, fetch from the network
                return fetch(event.request)
                    .then((networkResponse) => {
                        // Check if the network request was successful (status 200) and if it's a valid response type
                        if (!networkResponse || networkResponse.status !== 200 || networkResponse.type !== 'basic') {
                            return networkResponse;
                        }
                        // Important: clone the response as it's a stream and can only be consumed once
                        const responseToCache = networkResponse.clone();
                        caches.open(CACHE_NAME)
                            .then((cache) => {
                                cache.put(event.request, responseToCache); // Store the network response in the cache
                            });
                        return networkResponse;
                    })
                    .catch(() => {
                        // This catch block handles network errors (e.g., user is offline)
                        // You could serve an offline page here if you have one.
                        // For a basic offline app, simply returning an error or a generic offline page is sufficient.
                        console.error('Fetch failed: ', event.request.url);
                        // Example: return caches.match('/offline.html'); if you have an offline page
                        return Response.error(); // Or a custom offline response
                    })
            })
    );
});

self.addEventListener('activate', (event) => {
    // The activate event fires once, after a new service worker has installed and is ready to take control.
    // This is where you would typically clean up old caches from previous versions of your app.
    event.waitUntil(
        caches.keys().then((cacheNames) => {
            return Promise.all(
                cacheNames.map((cacheName) => {
                    if (cacheName !== CACHE_NAME) {
                        console.log('Deleting old cache:', cacheName);
                        return caches.delete(cacheName);
                    }
                })
            );
        })
    );
});

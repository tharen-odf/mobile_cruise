// service-worker.js

const ROOT_PATH = '/mobile_cruise'; // Root path of your app, adjust if necessary
const APP_PREFIX = 'mobile-cruise'; // Prefix for your app's cache
const CACHE_VERSION = 'v15'; // Version of your app, increment this when you update your
const CACHE_NAME = `${APP_PREFIX}-${CACHE_VERSION}`; // Full cache name

// List of all the URLs you want to cache for offline access.
// This includes your HTML file, CSS, JS, and CDN assets.
const urlsToCache = [
  `${ROOT_PATH}/`, // Your main index.html file
  `${ROOT_PATH}/#/`, // Your main index.html file with hash routing'
  `${ROOT_PATH}/index.html`, // Alternative for some server configurations
  `${ROOT_PATH}/css/style.css`, // CSS generated by Tailwind CSS CLI

  'https://placehold.co/192x192/25635b/31363f?text=FIx', // Favicon or app icon

  // 'app.js',  // If you have a separate JS file

  // CDN assets for Vue 3
  // 'https://unpkg.com/vue@3/dist/vue.global.js', // Or vue.global.prod.js for production
  'https://unpkg.com/vue@3/dist/vue.global.prod.js',

  // CDN assets for Vue Router (Adjust version as needed)
  'https://unpkg.com/vue-router@4',

  // CDN assets for Dexie (Adjust version as needed)
  'https://unpkg.com/dexie@3/dist/dexie.min.js',

  // CDN assets for PrimeIcons (Adjust version and specific CSS file as needed)
  'https://unpkg.com/primeicons@6.0.1/primeicons.css',
  // 'https://unpkg.com/primeicons@6.0.1/fonts/primeicons.ttf', // Ensure you cache the font files too
  // 'https://unpkg.com/primeicons@6.0.1/fonts/primeicons.woff',
  'https://unpkg.com/primeicons@6.0.1/fonts/primeicons.woff2',

  // Add any other specific images, fonts, or assets your app needs offline
];

self.addEventListener('install', (event) => {
  // The install event is the first event a service worker gets and happens only once.
  // It's used to precache resources needed for offline functionality.
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Opened cache', CACHE_NAME);
        return cache.addAll(urlsToCache);
      })
      .catch((error) => {
        console.error('Failed to pre-cache resources:', error);
      })
  );
});

self.addEventListener('fetch', (event) => {
  // Implement a "Network First, then Cache" strategy for all requests.
  event.respondWith(
    fetch(event.request)
      .then((networkResponse) => {
        // If the network request was successful, update the cache and return the response
        if (networkResponse && networkResponse.status === 200 && networkResponse.type === 'basic') {
          const responseToCache = networkResponse.clone();
          caches.open(CACHE_NAME)
            .then((cache) => {
              cache.put(event.request, responseToCache);
            });
        }
        return networkResponse;
      })
      .catch(() => {
        // If network fails, try to serve from cache
        return caches.match(event.request)
          .then((response) => {
            if (response) {
              console.log('Serving from cache (network failed):', event.request.url);
              return response;
            }
            // Optionally, return a fallback page or asset here
            return Response.error();
          });
      })
  );
});

self.addEventListener('activate', (event) => {
  // The activate event fires once, after a new service worker has installed and is ready to take control.
  // This is where you would typically clean up old caches from previous versions of your app.
  event.waitUntil(
    caches.keys().then((cacheNames) => {
    const cacheWhitelist = cacheNames.filter((cacheName) => {
      return cacheName.indexOf(APP_PREFIX);
      });
    cacheWhitelist.push(CACHE_NAME); // Ensure the current cache is kept

    // Delete old caches that are not in the cacheWhitelist
    return Promise.all(
      cacheNames.map((cacheName) => {
      if (cacheWhitelist.indexOf(cacheName) === -1) {
        // If the cache name is not in the cacheWhitelist, delete it
        console.log('Deleting old cache:', cacheName);
        return caches.delete(cacheName);
      }
      })
    );
    })
  );
});
